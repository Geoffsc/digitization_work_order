<%= stylesheet_link_tag "#{AppConfig[:frontend_prefix]}assets/fattable.css" %>
<%= javascript_include_tag "#{AppConfig[:frontend_prefix]}assets/fattable.js" %>

<%
  require 'cgi'

  def escape_tree(tree)
    tree['title'] = CGI.escapeHTML(tree['title'])

    ASUtils.wrap(tree['children']).map {|child| escape_tree(child)}

    tree
  end


  tree = JSONModel::HTTP::get_json(@uri + "/small_tree")

  tree = escape_tree(tree)
%>

<div class="record-pane">

  <h1>Work Order Form</h1>

  <p><strong>Resource: </strong> <%= tree['title'] %></p>
  <p><strong>Records Selected: </strong> <span id="selectedCount"></span></p>

  <div id='work_order_table'></div>

  <div>
    <hr>
    <button id="generateWorkOrderReport" class="btn btn-primary" disabled>Generate Report</button>
    <%= link_to 'Cancel',:back, :class => "btn btn-default" %>
  </div>
</div>

<script>
  $(document).ready(function() {

    var flattenTree = function (tree, level) {
      if (level === undefined) {
        level = 0;
      }

      var root = {'uri': tree.uri, 'title': tree.title, 'level': level, 'selected': false};

      var result = [root]

      if (tree['children'] && tree['children'].length > 0) {
        root['children'] = true
        for (var i = 0; i < tree['children'].length; i++) {
          result = result.concat(flattenTree(tree['children'][i], level + 1));
        }
      }

      return result;
    };

    var getIndexForUri = function(tree, uri) {
      var index;

      $.each(flattened, function(i, record) {
        if (record.uri == uri) {
          index = i;
          return false
        }
      });

      if (index == null) {
        throw "uri not found in tree: " + uri;
      }

      return index;
    }

    var renderTable = function (tree) {

      var parents_selected = [tree[0]['selected']];
      var level = tree[0]['level'];

      var selected_count = 0;

      var filtered_tree = tree.filter(function (elt) {
        if (elt['selected']) {
          selected_count = selected_count + 1;
        }

        if (elt['level'] > level && elt['children']) {
          parents_selected.push(elt['selected']);
        } else if (elt['level'] < level) {
          for(var i=0; i< level - elt['level']; i++) {
            parents_selected.pop();
          }
          if (elt['children']) {
            parents_selected.push(elt['selected']);
          }
        } else if (elt['level'] == level && elt['children']) {
          parents_selected.pop();
          parents_selected.push(elt['selected']);
        }

        level = elt['level'];

        return elt['level'] <= 1 || elt['selected'] || parents_selected[parents_selected.length - 1];
      });

      $("#selectedCount").html(selected_count);
      $("#generateWorkOrderReport").prop("disabled", selected_count == 0);

      $("#work_order_table").empty();

      var tableData = new fattable.SyncTableModel();
      tableData.getCellSync = function(i,j) {
        if (i >= filtered_tree.length) {
          return {
            'content': '',
            'rowId': i,
          };
        }

        if (j === 0) {
          return {
            "content": "<input data-rowid=' "+ i +" ' value='"+filtered_tree[i]['uri']+"' type='checkbox' " + (filtered_tree[i]['selected'] ? "checked" : "") + " />",
            "rowId": i,
          }
        }

        var spaces = '';

        for (var space = 0; space < filtered_tree[i]['level']; space++) {
          spaces += '&nbsp;&nbsp;';
        }

        var content = spaces + filtered_tree[i]['title'];

        if (filtered_tree[i]['children']) {
          content = '<b>' + content + '</b>';
        }

        return {
          "content": content,
          "rowId": i
        }
      };

      tableData.getHeaderSync = function(j) {
        if (j == 0) {
          return "Selected";
        } else if (j == 1) {
          return "Record Title";
        } else {
          return "Col" + j;
        }
      }

      var painter = new fattable.Painter();
      painter.fillCell = function(cellDiv, data) {
        cellDiv.innerHTML = data.content;
        if (data.rowId % 2 == 0) {
          cellDiv.className = "even";
        }
        else {
          cellDiv.className = "odd";
        }
      }
      painter.fillCellPending = function(cellDiv, data) {
        cellDiv.textContent = "";
        cellDiv.className = "pending";
      }

      var ROW_HEIGHT = 35;

      var table = fattable({
        "container": "#work_order_table",
        "model": tableData,
        "nbRows": filtered_tree.length,
        "rowHeight": ROW_HEIGHT,
        "headerHeight": 40,
        "painter": painter,
        "columnWidths": [100, 4500]
      });

      var idealHeight = ROW_HEIGHT * (filtered_tree.length + 1) + 20;
      $("#work_order_table").height(Math.min($("#work_order_table").height(), idealHeight));

      window.onresize = function() {
        table.setup();
      }

      return table;
    }

    var flattened = flattenTree(<%= tree.to_json.html_safe %>);

    workOrderFatTable = renderTable(flattened);

    $("#work_order_table").on("click", ":input", function(event) {
      var $checkbox = $(event.target);

      var rowid = parseInt($checkbox.data("rowid"));
      var uri = $checkbox.val();

      // update record 'selected' state
      var index = getIndexForUri(flattened, uri);
      flattened[index].selected = $checkbox.is(":checked");

      // update all children
      var level = flattened[index].level;
      for (var i = index + 1; i < flattened.length; i ++) {
        if (flattened[i].level > level) {
          flattened[i].selected = $checkbox.is(":checked");
        } else {
          break;
        }
      }

      workOrderFatTable = renderTable(flattened);

      // navigate back to the row you just clicked
      workOrderFatTable.goTo(rowid, 0);
    });

    $("#generateWorkOrderReport").on("click", function() {
      var selected = [];
      $.each(flattened, function(i, elt) {
        if (elt['selected']) {
          selected.push(elt['uri']);
        }
      });

      console.log("vvvvvvvv SELECTED URIS: vvvvvvvv");
      console.log(selected);
      console.log("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
    });
  });
</script>
